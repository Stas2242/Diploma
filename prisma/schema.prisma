generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model basket {
  id       Int    @id @default(autoincrement())
  id_user  Int
  id_goods Int
  price    Float?
  goods    goods  @relation(fields: [id_goods], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_basket__id_goods")
  users    users  @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_basket__id_user")

  @@index([id_goods], map: "idx_basket__id_goods")
  @@index([id_user], map: "idx_basket__id_user")
}

model category {
  id             Int        @id @default(autoincrement())
  id_parent      Int?
  name           String     @db.VarChar(100)
  description    String
  category       category?  @relation("categoryTocategory", fields: [id_parent], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_category__id_parent")
  other_category category[] @relation("categoryTocategory")
  goods          goods[]

  @@index([id_parent], map: "idx_category__id_parent")
}

model goods {
  id                                         Int         @id @default(autoincrement())
  id_category                                Int
  name                                       String      @db.VarChar(100)
  description                                String
  imageurl                                   String
  price                                      Float?
  amount                                     Int?        @db.SmallInt
  manufacture                                Int
  basket                                     basket[]
  category                                   category    @relation(fields: [id_category], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_goods__id_category")
  manufacture_goods_manufactureTomanufacture manufacture @relation("goods_manufactureTomanufacture", fields: [manufacture], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_goods__manufacture")

  @@index([id_category], map: "idx_goods__id_category")
  @@index([manufacture], map: "idx_goods__manufacture")
}

model manufacture {
  id                                   Int     @id @default(autoincrement())
  name                                 String  @db.VarChar(100)
  code                                 String
  goods_goods_manufactureTomanufacture goods[] @relation("goods_manufactureTomanufacture")
}

model role {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(50)
  description String
  is_block    Boolean?
  user_role   user_role[]
}

model user_role {
  id_user Int
  id_role Int
  role    role  @relation(fields: [id_role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_role__id_role")
  users   users @relation(fields: [id_user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_role__id_user")

  @@id([id_user, id_role])
  @@index([id_role], map: "idx_user_role__id_role")
}

model users {
  id        Int         @id @default(autoincrement())
  login     String      @db.VarChar(16)
  password  String      @db.VarChar(20)
  email     String      @db.VarChar(40)
  name      String      @db.VarChar(30)
  dt_bieth  DateTime?   @db.Date
  adress    String
  is_block  Boolean?
  basket    basket[]
  user_role user_role[]
}
